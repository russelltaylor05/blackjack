Alex Gronbach
CPE 458
Final Project Proposal
2/8/2013

Project Idea:
For my project I would like to create a blackjack simulator that will predict,
given the cards that have already been delt out to the table, whether the 
player should hit or stand.  This will first be implemented in serial on the 
CPU, then it will be modified to run on the CUDA architecture utilizing
parallel processing on the GPU.  The last phase will be to optimize the code so
that it is able to respond to the player in real time (<50ms).

Background:
This project will be simulating Basic Strategy for Blackjack, which gives the
player a good idea of whether they should hit or stand based on their cards and
the card that the dealer is showing.  Basic Strategy really only covers when
the player is dealt a sum of greater than 11 but less than 17.  If the player
has 17 or higher, they should never hit, and if the player has less than 11,
there is no danger to them hitting, and they should always take another card.

Execution:
This program will not simply have a look up table of basic strategy, it will do
its own calculation of how many outcomes by taking another card were bad for
the player (resulting in their sum>21) and how many were good for the player
(resulting in their sum <=21) and then telling the player to hit or stand
depending on which count (good outcomes or bad outcomes) is higher.  This count
will only be calculated if the player's sum is between 11 and 17, as explained
earlier, it is pointless to hit above 16 or to not take a card below 12.

Data Structures:
Since Blackjack has no meaning to a card's suit, this information will not be
stored in the program.  Instead, a deck of cards will be split into 13 cards
stored as their values [2,3,4,5,6,7,8,9,10,10,10,10,11] with special handling
for 11 (if the player's "next card" could be 11, it will also be calculated as
adding 1 instead of 11.  Whichever outcome is more beneficial will be kept.
Four of these data structures, containing 13 cards each, will be generated per
deck, and stored in the same single-dimension array.  Cards will be drawn from
this array until every card is used.  For the cards that are already in play,
their values will either be replaced with a 0 or a -1 in this array, with
special handling cases (likely just ignore this run and re-draw) happening if
one of these cards is drawn.

Publications:
I am planning on submitting a "Regular Paper" to IEEE Computer Society via this
link: http://www.computer.org/portal/web/tc/author.  The specifications are
listed on the website.

Partners:
I was contacted by Haikal and Russell with interest in being my partner(s) for
this project.  I am open to taking on as many partners as possible, to be able
to further flesh out this simulator.
